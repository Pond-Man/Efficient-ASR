
# ############################################################################
# Tweaked to use Citrinet Encoder rather than Conformer 
# Model: E2E ASR with CTC
# Encoder: Citrinet Encoder
# Decoder: CTC beam searcher and greedy searcher
# Tokens: character
# Training: Librispeech 100h
# 
# Based off of hyperparameter file written by: 
# Authors: Titouan Parcollet, Shucong Zhang, Adel Moumen
# ############################################################################
# Seed needs to be set at top of yaml, before objects with parameters are made

seed: 3402
__set_seed: !apply:torch.manual_seed [!ref <seed>]
output_folder: !ref results/citrinet_ctc/
wer_file: !ref <output_folder>/wer.txt
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt

# Data files
data_folder: !PLACEHOLDER  # e.g., /path/to/LibriSpeech
# If RIRS_NOISES dir exists in /localscratch/xxx_corpus/RIRS_NOISES
# then data_folder_rirs should be /localscratch/xxx_corpus
# otherwise the dataset will automatically be downloaded
# data_folder_rirs: !ref <data_folder>
train_splits: ["train-clean-100"]
dev_splits: ["dev-clean"]
test_splits: ["test-clean", "test-other"]
skip_prep: False
train_csv: !ref <output_folder>/train-clean-100.csv
valid_csv: !ref <output_folder>/dev-clean.csv
test_csv:
    - !ref <output_folder>/test-clean.csv
    - !ref <output_folder>/test-other.csv

####################### Training Parameters ####################################

number_of_epochs: 500
batch_size: 8 
grad_accumulation_factor: 2
max_grad_norm: 5.0
sorting: descending #random
num_workers: 8
loss_reduction: batchmean
valid_search_interval: 1
avg_checkpoints: 10 # Number of checkpoints to average for evaluation

lr_model: 0.05
weight_decay: 0.001

# Feature parameters
sample_rate: 16000
n_fft: 512
n_mels: 64
win_length: 25

# Training parameters
# To make Transformers converge, the global bath size should be large enough.
# The global batch size is max_batch_len * n_gpus * gradient_accumulation.
# Empirically, we used 850 * 8 A40 45G GPUs * 2 or 1700 * 4 A100 80G * 2.
# Please, set your parameters accordingly.
# In the case of Citrinet, this is still true and dynamic batching offers 
# advantages so it is kept. 
dynamic_batching: True
max_batch_length_train: 425
max_batch_len_val: 50
num_bucket: 200
shuffle: False # if true re-creates batches at each epoch shuffling examples.
max_batch_ex: 128
batch_ordering: random

dynamic_batch_sampler_train:
    max_batch_length: !ref <max_batch_length_train>
    num_buckets: !ref <num_bucket>
    shuffle: !ref <shuffle>
    batch_ordering: !ref <batch_ordering>
    max_batch_ex: !ref <max_batch_ex>

dynamic_batch_sampler_val:
    max_batch_length: !ref <max_batch_len_val>
    num_buckets: !ref <num_bucket>
    shuffle: !ref <shuffle>
    batch_ordering: !ref <batch_ordering>
    max_batch_ex: !ref <max_batch_ex>

# Dataloader options
train_dataloader_opts:
    batch_size: !ref <batch_size>
    shuffle: True
    num_workers: !ref <num_workers>

valid_dataloader_opts:
    batch_size: 1

test_dataloader_opts:
    batch_size: 1

####################### Model Parameters #######################################

# Citrinet Parameters
n_class: 31
hidden_channels: 256
B: 5
S: 1
R: 5
prolog_kernel: 5
kernels_B1: [11,13,15,17,19,21]
kernels_B2: [13,15,17,19,21,23,25]
kernels_B3: [25,27,29,31,33,35,37,39]
epilog_kernel: 41
dropout: 0.2


# Outputs
token_type: char  # ["unigram", "bpe", "char"]
character_coverage: 1.0
blank_index: 0
bos_index: 1
eos_index: 2
output_neurons: 31

# Decoding parameters
beam_size: 100
beam_prune_logp: -12.0
token_prune_min_logp: -1.2
prune_history: False

############################## models ################################

enc: !new:models.citrinet.Citrinet
    n_feats: !ref <n_mels>
    n_class: !ref <output_neurons>
    hidden_channels: !ref <hidden_channels>
    B: !ref <B>
    S: !ref <S>
    R: !ref <R>
    prolog_kernel: !ref <prolog_kernel>
    kernels_B1: !ref <kernels_B1>
    kernels_B2: !ref <kernels_B2>
    kernels_B3: !ref <kernels_B3>
    epilog_kernel: !ref <epilog_kernel>
    dropout: !ref <dropout>

ctc_lin: !new:speechbrain.nnet.linear.Linear
    input_size: 31
    n_neurons: !ref <output_neurons>

normalize: !new:speechbrain.processing.features.InputNormalization
    norm_type: global
    update_until_epoch: 4

modules:
    enc: !ref <enc>
    ctc_lin: !ref <ctc_lin>
    normalize: !ref <normalize>

model: !new:torch.nn.ModuleList
    - [!ref <enc>, !ref <ctc_lin>]

####################### Decoding & optimiser ###########################

# Decoding parameters
test_beam_search:
    blank_index: !ref <blank_index>
    beam_size: !ref <beam_size>
    beam_prune_logp: !ref <beam_prune_logp>
    token_prune_min_logp: !ref <token_prune_min_logp>
    prune_history: !ref <prune_history>

ctc_cost: !name:speechbrain.nnet.losses.ctc_loss
    blank_index: !ref <blank_index>
    reduction: !ref <loss_reduction>

cosine_annealing: !new:speechbrain.nnet.schedulers.CyclicCosineScheduler
    lr_initial: !ref <lr_model>
    n_warmup_steps: 1000 # from paper

model_opt_class: !name:torch.optim.Adam
    lr: !ref <lr_model>
    betas: (0.8, 0.25)
    eps: 0.000000001
    weight_decay: !ref <weight_decay>

log_softmax: !new:torch.nn.LogSoftmax
    dim: -1

############################## Augmentations ###################################

speed_perturb: !new:speechbrain.augment.time_domain.SpeedPerturb
    orig_freq: !ref <sample_rate>
    speeds: [95, 100, 105]

drop_freq: !new:speechbrain.augment.time_domain.DropFreq
    drop_freq_low: 0
    drop_freq_high: 1
    drop_freq_count_low: 1
    drop_freq_count_high: 3
    drop_freq_width: 0.05

drop_chunk: !new:speechbrain.augment.time_domain.DropChunk
    drop_length_low: 1000
    drop_length_high: 2000
    drop_count_low: 1
    drop_count_high: 5

# Augmenter: Combines previously defined augmentations to perform data augmentation
wav_augment: !new:speechbrain.augment.augmenter.Augmenter
    parallel_augment: False
    concat_original: True
    repeat_augment: 1
    shuffle_augmentations: False
    min_augmentations: 4
    max_augmentations: 4
    augment_prob: 1.0
    augmentations: [
        !ref <speed_perturb>,
        !ref <drop_freq>,
        !ref <drop_chunk>
    ]

compute_features: !new:speechbrain.lobes.features.Fbank
    sample_rate: !ref <sample_rate>
    n_fft: !ref <n_fft>
    win_length: !ref <win_length>
    n_mels: !ref <n_mels>

############################## Logging and Pretrainer ##########################

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        model: !ref <model>
        cosine_scheduler: !ref <cosine_annealing>
        normalizer: !ref <normalize>
        counter: !ref <epoch_counter>

epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

cer_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats
    split_tokens: True
wer_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats
